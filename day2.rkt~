#lang racket/base

(require racket/file
         racket/match
         megaparsack
         megaparsack/text
         data/monad
         data/applicative)

(define ls-test
    '("1-3 a: abcde"
      "1-3 b: cdefg"
      "2-9 c: ccccccccc"))

(define input-file
  "/home/ebresafegaga/repos/adventofcode/day2.txt")

(struct range (upper lower) #:transparent)
(struct line (range char text) #:transparent)

(define (lines)
  (file->lines input-file))

(define (valid? input)
  (match-let* ([(line (range low up) char str) input]
               [chars (filter (λ (c) (eq? c char)) str)]
               [len (length chars)])
    (and (<= len up)
         (>= len low))))

(define (split line)
  line)

(define line/p
  (do [lower <- integer/p]
    (char/p #\-)
    [upper <- integer/p]
    space/p
    [char <- any-char/p]
    (char/p #\:)
    space/p
    [text <- (many/p any-char/p)]
    eof/p
    (pure (line (range lower upper)
                char
                text))))

(define (answer ls)
  (length
   (filter valid?
           (map (λ (line) (parse-result! (parse-string line/p
                                                       line)))
                ls))))

(define (string->range line)
  (parse-result!
   (parse-string line/p
                 line)))

(struct some (value) #:transparent)
(struct none () #:transparent)

(define (char/parser c str)
  (match (string->list str)
    [(cons x xs) #:when (eq? c x) (some `(,x . ,(list->string xs)))]
    [_ (none)]))




